	.text
	.file	"sockfilter.bpf.c"
	.section	socket,"ax",@progbits
	.globl	socket_handler                  # -- Begin function socket_handler
	.p2align	3
	.type	socket_handler,@function
socket_handler:                         # @socket_handler
	r1 = map ll # BPF_LD_MAP_FD(BPF_REG_ARG1, mapfd),

	# fill r0 with pointer to map value
    r8 = r10 # BPF_MOV64_REG(BPF_REG_TMP, BPF_REG_FP),
	r8 += -4 # BPF_ALU64_IMM(BPF_ADD, BPF_REG_TMP, -4), // allocate 4 bytes stack
	r2 = 1 # BPF_MOV32_IMM(BPF_REG_ARG2, 1),
	*(u32 *)(r8 - 0) = r2 # BPF_STX_MEM(BPF_W, BPF_REG_TMP, BPF_REG_ARG2, 0),
	r2 = r8 # BPF_MOV64_REG(BPF_REG_ARG2, BPF_REG_TMP),
	call bpf_map_lookup_elem # BPF_EMIT_CALL(BPF_FUNC_map_lookup_elem),
	if r0 != 0 goto two # BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 2),
	r0 = 0 # BPF_MOV64_REG(BPF_REG_0, 0), // prepare exit
    exit # BPF_EXIT_INSN(), // exit

two:
	# TODO
	# r1 = 0xffff'ffff, mistreated as 0xffff'ffff'ffff'ffff
	# BPF_MOV32_IMM(BPF_REG_1, 0xffffffff),
	# r1 = 0x1'0000'0000, mistreated as 0
	# BPF_ALU64_IMM(BPF_ADD, BPF_REG_1, 1),
	# r1 = 0x1000'0000'0000'0000, mistreated as 0
	# BPF_ALU64_IMM(BPF_LSH, BPF_REG_1, 28),

    #   // compute noncanonical pointer
    #   BPF_ALU64_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),

    #   // crash by writing to noncanonical pointer
    #   BPF_MOV32_IMM(BPF_REG_1, 0xdeadbeef),
    #   BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_1, 0),

    #   // terminate to make the verifier happy
    #   BPF_MOV32_IMM(BPF_REG_0, 0),
    #   BPF_EXIT_INSN()

	exit
.Lfunc_end0:
	.size	socket_handler, .Lfunc_end0-socket_handler
                                        # -- End function


	.type	LICENSE,@object                 # @LICENSE
	.section	license,"aw",@progbits
	.globl	LICENSE
LICENSE:
	.asciz	"Dual BSD/GPL"
	.size	LICENSE, 13

	.type	map,@object                     # @map
	.section	.maps,"aw",@progbits
	.globl	map
	.p2align	3
map:
	.zero	32
	.size	map, 32

	.addrsig
	.addrsig_sym socket_handler
	.addrsig_sym LICENSE
	.addrsig_sym map

	# Minimal valid BTF section required for Prevail
	.section        .BTF,"",@progbits
	.short  60319                   # 0xeb9f
	.byte   1 # version
	.byte   0 # flags
	.long   24 # hdr_len
	.long 0 # type_off
	.long 16 # type_len
	.long 16 # str_off
	.long 5 # str_len
	.long 1                               # string offset 1, BTF_KIND_INT(id = 2)
	.long 16777216                        # info = 0x1000000
	.long 4 # size
	.long 16777248 # int metadata: 0x1000020
	.byte	0                               # string offset=0
	.ascii	"int"                           # string offset=1
	.byte	0

	.section        .BTF.ext,"",@progbits
	.short  60319                   # 0xeb9f
	.byte   1 # version
	.byte   0 # flags
	.long   24 # hdr_len
	.long 0 # func_into_off
	.long 0 # func_info_len
	.long 0 # line_info_off
	.long 0 # line_info_len
